package com.ydl.quartz.task;

import com.ydl.common.core.domain.entity.StaffDict;
import com.ydl.common.core.domain.entity.SysUser;
import com.ydl.system.mapper.StaffDictMapper;
import com.ydl.system.mapper.SysUserMapper;
import com.ydl.system.service.StaffDictService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import com.ydl.common.utils.StringUtils;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.Filter;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * 定时任务调度测试
 * 
 * @author ruoyi
 */
@RestController
@Component("ryTask")
public class RyTask
{


    @Qualifier("springSecurityFilterChain")
    @Autowired
    private Filter springSecurityFilterChain;

    public void ryMultipleParams(String s, Boolean b, Long l, Double d, Integer i)
    {
        System.out.println(StringUtils.format("执行多参方法： 字符串类型{}，布尔类型{}，长整型{}，浮点型{}，整形{}", s, b, l, d, i));
    }

    public void ryParams(String params)
    {
        System.out.println("执行有参方法：" + params);
    }

    @Autowired
    private StaffDictMapper staffDictMapper;
    @Autowired
    private SysUserMapper sysUserMapper;


    public void ryNoParams()
    {

        System.out.println("执行无参方法");

        // 1. 查询staff_dict表中所有数据
        List<StaffDict> allStaff = staffDictMapper.selectStrffList(new StaffDict());

        // 2. 查询sys_user表中所有userId
        List<SysUser> allUsers = sysUserMapper.selectUserList(new SysUser());
        Set<Long> existingUserIds = allUsers.stream()
                .map(SysUser::getUserId)
                .collect(Collectors.toSet());

        // 3. 找出staff_dict中存在但sys_user中不存在的记录
        List<StaffDict> newStaffs = allStaff.stream()
                .filter(staff -> !existingUserIds.contains(staff.getId()))
                .collect(Collectors.toList());

        // 4. 将新增的staff数据转换为sys_user并保存
        for (StaffDict staff : newStaffs) {
            SysUser newUser = convertStaffToUser(staff);
            try {
                sysUserMapper.insertUser(newUser); // 假设有insert方法，如果没有需要使用save方法
                System.out.println(newUser.getUserId());
            } catch (Exception e) {
                // 记录日志，继续处理下一条
                System.err.println("插入用户失败: " + staff.getId() + ", 错误: " + e.getMessage());
            }
        }
    }
    /**
     * 将StaffDict对象转换为SysUser对象
     * @param staff StaffDict对象
     * @return 转换后的SysUser对象
     */
    private SysUser convertStaffToUser(StaffDict staff) {
        SysUser user = new SysUser();
        user.setUserId(staff.getId());      // id对应userId
        user.setPassword(staff.getPassword() != null ? staff.getPassword() : "defaultPassword");
        if ("女".equals(staff.getSex())){
            user.setSex("1");
        } else{
            user.setSex("0");
        }      // sex对应
        user.setEmail(staff.getEmail() != null ? staff.getEmail() : "");
        user.setNickName(staff.getName() != null ? staff.getName() : "");
        user.setDeptId(staff.getDeptCode() != null ? staff.getDeptCode() : null);
        user.setCreateTime(new Date());
        user.setUserName(staff.getUserName() != null ? staff.getUserName() : String.valueOf(staff.getId()));

        // 其他可能需要设置的字段
        // 如果没有对应字段可以设置默认值或留空
        user.setCreateTime(new Date());     // 设置创建时间
        user.setUpdateTime(new Date());    // 设置更新时间
        user.setStatus("1");              // 假设1表示活跃用户

        return user;
    }

}
